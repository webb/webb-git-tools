#!/usr/bin/env bash

#HELP:WBL_COMMAND_NAME: Add expressions to a git excludes/ignore file
#HELP:Usage: WBL_COMMAND_NAME $path ...

wbl_load handle_options
wbl_load help_option
wbl_load external_error
wbl_load internal_error
wbl_load add_option

unset scope
wbl_add_option \
  --long-option=scope \
  --short-option=s \
  --variable=scope_option \
  --has-arg \
  --help="-s, --scope=\$scope: Set the level at which the exclusion takes effect.
Scopes include:
        global: set at the user level (via property core.excludefile)
        root: set at current git repo's root .gitignore file
        local: set at current git repo's .git/info/excludes file
        dir: set at current folder's .gitignore file
    Scopes can be abbreviated to their first letter (e.g., -sl).
    If the current working directory is within a git repo, the default
    scope is \"root\", otherwise it's \"global\"."
    
wbl_handle_options "$@"
shift $((OPTIND-1))

if [[ ! ${scope_option+is-set} ]]
then wbl_external_error "option --scope is required"
else case $scope_option in
        global | g ) scope=global;;
        root | r ) scope=root;;
        local | l ) scope=local;;
        dir | d ) scope=dir;;
        * ) wbl_external_error "Unknown scope \"$scope_option\". Must be global, root, local, or dir.";;
     esac
fi

if git rev-parse 2>/dev/null
then in_git_repo=true
else in_git_repo=false
fi

if [[ $in_git_repo = true ]]
then in_git_dir=$(git rev-parse --is-inside-git-dir)
else in_git_dir=false
fi

if [[ is-set != ${scope+is-set} ]]
then
  if [[ $in_git_repo = true ]]
  then scope=root
  else scope=global
  fi
fi
  
unset excludesfile

case $scope in
    global )
        if ! excludesfile=$(git config --path --get core.excludesfile 2>/dev/null)
        then wbl_external_error "Global scope requested, but property core.excludesfile is unset"
        fi
        ;;
    root )
        if [[ $in_git_repo = false ]]
        then wbl_external_error "Root scope requested, but context is not a git repository"
        fi
        excludesfile=$(git rev-parse --show-toplevel)/.gitignore
        ;;
    local )
        if [[ $in_git_repo = false ]]
        then wbl_external_error "Local scope requested, but context is not a git repository"
        fi
        excludesfile=$(git rev-parse --absolute-git-dir)/info/exclude
        ;;
    dir )
        if [[ $in_git_repo = false ]]
        then wbl_external_error "Dir scope requested, but context is not a git repository"
        fi
        if [[ $in_git_dir = true ]]
        then wbl_external_error "Dir scope requested, but context is in a .git folder"
        fi
        excludesfile=$PWD/.gitignore
        ;;
    * ) wbl_internal_error "bad scope \"$scope\""
esac

git_root_dir=$(git rev-parse --show-toplevel)
git_ignore_file_relative=$(realpath --relative-to=. -- "$excludesfile")

for relative_path in "$@"
do case $scope in
       root | local ) line=/$(realpath --relative-to="$git_root_dir" -- "$relative_path") ;;
       global ) line=$relative_path;;
       dir ) line=/$(realpath --relative-to="$(dirname "${excludesfile}")" -- "$relative_path") ;;
       * ) wbl_internal_error "unexpected \$scope $scope";;
   esac
   printf 'Add "%s" to %s?\n' "$line" "$excludesfile" >&2
   PS3='? '
   select option in yes no edit quit
   do case "$option" in
          yes ) printf '%s\n' "$line" >> "$excludesfile"
                break;;
          no ) printf 'Skipping %s\n' "$line" >&2
               break;;
          edit ) printf '%s\n' "$line" >> "$excludesfile"
                 "$EDITOR" "$excludesfile"
                 break;;
          quit ) break 2;;
          * ) echo "Type a number.";;
      esac
   done
done

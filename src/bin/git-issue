#!/usr/bin/env bash

# TODO: add a "force" argument to do issue stuff when there's a dirty working directory.
# TODO: fetch issue subject from github

#HELP:COMMAND_NAME: Operations supporting working with github issues
#HELP:Usage: COMMAND_NAME [options] $command $args...

set -o nounset -o errexit -o pipefail

root_dir=$(dirname "$0")/..
. "$root_dir"/share/wrtools-core/opt_help.bash
. "$root_dir"/share/wrtools-core/opt_verbose.bash
. "$root_dir"/share/wrtools-core/fail.bash
. "$root_dir"/share/wrtools-core/temp.bash

#HELP:Options:
#HELP:  --help | -h: Print this help
#HELP:  --verbose, -v: Print additional diagnostics

OPTIND=1
while getopts :hv:-: option
do case "$option" in
       h ) opt_help;;
       v ) opt_verbose;;
       - ) case "$OPTARG" in
               help ) opt_help;;
               help=* ) fail_arg_unexpected "$OPTARG";;
               verbose ) opt_verbose;;
               verbose=* ) fail_arg_unexpected "$OPTARG";;
               * ) fail_option_unknown "$OPTARG";;
            esac;;
        '?' ) fail_option_unknown "$OPTARG";;
        : ) fail_arg_missing "$OPTARG";;
        * ) fail_assert "Bad state in getopts (OPTARG=\"$OPTARG\")";;
   esac
done
shift $((OPTIND-1))

if ! git rev-parse > /dev/null 2>&1
then fail "Not in a git repository"
fi

(( $# > 0 )) || fail "need a command"

# git config keys:
# wrtools.issue.$issue-branch.parent-branch
# wrtools.issue.$issue-branch.issueuri

# indicate if the working directory is clean
is_status_clean () {
    local status
    if ! status=$(git status --porcelain=v2)
    then fail "\"git status\" failed when checking for clean working directory"
    fi
    [[ -z $status ]]
}

#HELP:Commands:
vecho "command is \"$1\""
case "$1" in
    #HELP:  help: Print this help
    help ) opt_help;;
    #HELP:  checkout $URL: Checkout a new branch for a github issue
    checkout )
        (( $# == 2 )) || fail "checkout requires a github issue URI"
        is_status_clean || fail "working directory is not clean"
        github_issue_regex='^https://github.com/[^/]*/[^/]*/issues/([1-9][0-9]*)$'
        if [[ $2 =~ $github_issue_regex ]]
        then
          uri=${BASH_REMATCH[0]}
          issue_number=${BASH_REMATCH[1]}
        else fail "unknown issue format: \"$2\""
        fi
        parent_branch=$(git symbolic-ref --short HEAD)
        issue_branch="dev-issue-$issue_number"
        if git rev-parse --verify --quiet "$issue_branch" > /dev/null
        then fail "issue branch $issue_branch already exists"
        fi
        git checkout -b "$issue_branch"
        git commit --allow-empty -m "Issue $uri."
        git config "wrtools.issue.$issue_branch.parent-branch" "$parent_branch"
        git config "wrtools.issue.$issue_branch.issue-uri" "$uri"
        exit 0
        ;;
    #HELP:  diff: Show diffs on issue branch
    diff )
        shift
        issue_branch=$(git symbolic-ref --short HEAD) || fail "Error identifying HEAD"
        parent_branch=$(git config --get "wrtools.issue.$issue_branch.parent-branch") \
          || fail "No parent branch set for current branch $issue_branch"
        vrun git diff "$parent_branch" "$issue_branch" -- "$@"
        exit 0
        ;;
    #HELP:  log: Display & copy to clipboard the log of this branch.
    log )
        (( $# == 1 )) || fail "command \"log\" takes no parameters"
        issue_branch=$(git symbolic-ref --short HEAD) || fail "Error identifying HEAD"
        parent_branch=$(git config --get "wrtools.issue.$issue_branch.parent-branch") \
          || fail "No parent branch set for current branch $issue_branch"
        git catlog "$parent_branch".."$issue_branch"
        exit 0
        ;;
    #HELP:  merge: Merge this issue branch back into the parent branch.
    merge )
        (( $# == 1 )) || fail "command \"$1\" takes no parameters"
        is_status_clean || fail "working directory is not clean"
        issue_branch=$(git symbolic-ref --short HEAD) || fail "Error identifying HEAD"
        parent_branch=$(git config --get "wrtools.issue.$issue_branch.parent-branch") \
          || fail "No parent branch set for current branch $issue_branch"
        issue_uri=$(git config --get "wrtools.issue.$issue_branch.issue-uri") \
          || fail "No issue URI set for current branch $issue_branch"
        git checkout "$parent_branch"
        git merge --no-ff -m "Merge topic branch for issue $issue_uri into parent branch $parent_branch. Closes $issue_uri." "$issue_branch"
        git branch -d "$issue_branch"
        git config --unset "wrtools.issue.$issue_branch.parent-branch"
        git config --unset "wrtools.issue.$issue_branch.issue-uri"
        exit 0
        ;;
    #HELP:  squash: Squash the commits of the issue branch down & fast forward merge
    squash )
        (( $# == 1 )) || fail "command \"log\" takes no parameters"
        is_status_clean || fail "working directory is not clean"
        issue_branch=$(git symbolic-ref --short HEAD) || fail "Error identifying HEAD"
        parent_branch=$(git config --get "wrtools.issue.$issue_branch.parent-branch") \
          || fail "No parent branch set for current branch $issue_branch"
        issue_uri=$(git config --get "wrtools.issue.$issue_branch.issue-uri") \
          || fail "No issue URI set for current branch $issue_branch"
        git commit --allow-empty -m "Closes $issue_uri."
        git rebase -i --keep-empty "$parent_branch"
        git checkout "$parent_branch"
        git merge --ff-only "$issue_branch"
        git branch -d "$issue_branch"
        git config --unset "wrtools.issue.$issue_branch.parent-branch"
        git config --unset "wrtools.issue.$issue_branch.issue-uri"
        exit 0
        ;;
    #HELP:  status: Display current state.
    status )
        git config --get-regex '^wrtools.issue.'
        exit 0
        ;;
    #HELP:  open: Open the GitHub issue in the browser.
    open )
        issue_branch=$(git symbolic-ref --short HEAD) || fail "Error identifying HEAD"
        issue_uri=$(git config --get "wrtools.issue.$issue_branch.issue-uri") \
          || fail "No issue URI set for current branch $issue_branch"
        exec open "$issue_uri"
        ;;
    #HELP:  clean: Forget the git issue memory.
    clean )
        git config -z --name-only --get-regexp '^wrtools.issue.' \
            | xargs -0 -n 1 git config --unset
        ;;
    * )
        fail "unknown command \"$1\""
        ;;
esac

if ! git rev-parse > /dev/null 2>&1
then fail "Not in a git repository"
fi
